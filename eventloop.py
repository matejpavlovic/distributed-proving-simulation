# Simple event loop processing events generated by modules in timestamp order.

from queue import PriorityQueue

# Events that still need to be processed by the simulation, sorted by timestamp.
# The entries are tuples of (timestamp, event), where timestamp is the logical time
# at which event should be processed.
# Dequeue from pending_events to get the next event to be processed.
pending_events = PriorityQueue()

# Stores a handler function for each event type.
# See set_handler().
handlers = {}


def add(event):
    pending_events.put((event.ts, event))


def next_event():
    return pending_events.get()[1]


def set_handler(event_type, handler):
    if event_type in handlers:
        raise Exception("Handler for {0} already set.".format(event_type))

    handlers[event_type] = handler


def process_event(event):
    print(event)

    if event.type not in handlers:
        raise Exception("Unknown event type: " + event.type)
    handlers[event.type](event)


def run():
    while not pending_events.empty():
        process_event(next_event())
